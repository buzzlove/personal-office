{"version":3,"sources":["Auth/Auth.jsx","Redux/AuthReducer.js","Auth/AuthContainer.jsx","Contacts/EditFormLocal.jsx","Contacts/Contact.jsx","Contacts/AddContact.jsx","Redux/ContactsReducer.js","Contacts/ContactsContainer.jsx","App.js","Redux/store.js","index.js"],"names":["renderField","input","label","type","meta","touched","error","placeholder","reduxForm","form","validate","values","errors","login","length","password","handleSubmit","submitting","onSubmit","Field","name","component","disabled","initialState","isAuth","setLoginFormAC","authState","AuthReducer","state","action","connect","Auth","checkLogin","formData","dispatch","contact","phone","email","Contact","contacts","deleteContactInStateAC","changeContactInfoAC","useState","editMode","setEditMode","currentId","setCurrentIndex","toggleEditMode","contactId","target","value","deleteContact","localFormContact","contactListArrMapping","map","key","id","initialValues","onClick","contactsList","filterContactList","ContactsReducer","lastValue","newContact","filter","item","toLowerCase","indexOf","textSearch","newContactForm","Contacts","addContactToStateAC","searchContactInStateAC","currentContacts","searchName","setSearchName","className","onChange","contactForm","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d61ec49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error} }) => (\r\n    <div>\r\n        <label>{label}</label>\r\n        <div>\r\n            <input {...input} placeholder={label} type={type}/>\r\n            {touched && ((error && <div>{error}</div>))}\r\n        </div>\r\n    </div>\r\n)\r\nconst validate = values => {\r\n    const errors = {}\r\n    if (!values.login) {\r\n        errors.login = 'Обязательно для заполнения'\r\n    } else if (values.login.length > 15) {\r\n        errors.login = 'Максимум 15 символов'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Обязательно для заполнения'\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n\r\nconst Auth = ({handleSubmit, submitting}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field name={'login'} component={renderField} type={'text'} placeholder={'Введите имя пользователя'}/>\r\n        </div>\r\n        <div>\r\n            <Field name={'password'} component={renderField} type={'password'} placeholder={'Введите пароль'}/>\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\" disabled={submitting}>Войти</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\n\r\n\r\nexport default reduxForm({form: 'AuthForm', validate})(Auth);","let initialState = {\r\n    login: 'admin',\r\n    password: '123',\r\n    isAuth: false\r\n}\r\n\r\nconst setLoginForm = '/AuthReducer/setLoginForm';\r\n\r\nconst AuthReducer = (state=initialState, action) => {\r\n    switch(action.type){\r\n        case '/AuthReducer/setLoginForm':\r\n            return {...state, isAuth: action.authState};\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setLoginFormAC = (authState) => ({type: setLoginForm, authState});\r\n\r\nexport const checkLogin = (formData) => (dispatch) => {\r\n    if(formData.login === initialState.login && formData.password === initialState.password){\r\n       dispatch(setLoginFormAC(true));\r\n    } else {dispatch(setLoginFormAC(false));}\r\n}\r\nexport default AuthReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Auth from \"./Auth\";\r\nimport {checkLogin} from \"../Redux/AuthReducer\";\r\n\r\n\r\n\r\nconst AuthContainer = ({checkLogin}) => {\r\n    const onSubmit = (formData) => {\r\n        checkLogin(formData);\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <div>\r\n            <h1>Авторизация</h1>\r\n        </div>\r\n        <div>\r\n            <Auth onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{checkLogin})(AuthContainer);","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst EditFormLocal = ({handleSubmit, contact}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <h4>Редкатировать контакт</h4>\r\n            </div>\r\n            <div>\r\n                <Field name={'name'} component={'input'} type={'text'} placeholder={contact.name} />\r\n            </div>\r\n            <div>\r\n                <Field name={'phone'} component={'input'} type={'tel'} placeholder={contact.phone} />\r\n            </div>\r\n            <div>\r\n                <Field name={'email'} component={'input'} type={'email'} placeholder={contact.email} />\r\n            </div>\r\n            <div>\r\n                <button>Обновить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm ({form: 'editFormLocal'})(EditFormLocal);","import React, {useState} from \"react\";\r\nimport EditFormLocal from \"./EditFormLocal\";\r\n\r\nconst Contact = ({contacts, deleteContactInStateAC, changeContactInfoAC}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [currentId, setCurrentIndex] = useState();\r\n\r\n    const toggleEditMode = (contactId) => {\r\n        setCurrentIndex(+contactId.target.value);\r\n        setEditMode(!editMode);\r\n    };\r\n\r\n    let deleteContact = (contactId) => {\r\n        deleteContactInStateAC(+contactId.target.value);\r\n    };\r\n    const onSubmit = (localFormContact) => {\r\n        changeContactInfoAC(localFormContact, currentId);\r\n        setEditMode(false);\r\n    }\r\n\r\n    let contactListArrMapping = contacts.map((contact) => (\r\n        <div key={contact.name}>\r\n            {(editMode === true && contact.id === currentId) ?\r\n                <EditFormLocal onSubmit={onSubmit}\r\n                               contact={contact}\r\n                               initialValues={contact}\r\n                               />\r\n                :\r\n                <div>\r\n                    <div>Имя:    {contact.name}</div>\r\n                    <div>Телефон:{contact.phone}</div>\r\n                    <div>Email:  {contact.email}</div>\r\n                    <div>\r\n                        <button onClick={toggleEditMode} value={contact.id}>Редактировать</button>\r\n                        <button onClick={deleteContact} value={contact.id}>Удалить</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>))\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>Список контактов</h4>\r\n            </div>\r\n            <div>\r\n                {contactListArrMapping}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Contact;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst AddContact = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <h4>Добавить контакт</h4>\r\n            </div>\r\n            <div>\r\n                <Field name={'name'} component={'input'} type={'text'} placeholder={'Введите имя'} />\r\n            </div>\r\n            <div>\r\n                <Field name={'phone'} component={'input'} type={'tel'} placeholder={'Введите номер телефона'} />\r\n            </div>\r\n            <div>\r\n                <Field name={'email'} component={'input'} type={'email'} placeholder={'Введите email'} />\r\n            </div>\r\n            <div>\r\n                <button>Добавить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm ({form: 'addContact'})(AddContact);","const addContactToState = '/ContactsReducer/addContactToState';\r\nconst deleteContactInState =  '/ContactsReducer/deleteContactInState';\r\nconst searchContactInState = '/ContactsReducer/searchContactInState';\r\nconst changeContactInfo = '/ContactsReducer/changeContactInfo';\r\n\r\nlet initialState = {\r\n    contactsList: [\r\n        {\r\n            name: \"Andrey\",\r\n            phone: '+79542568974',\r\n            email: 'andrey@mail.ru',\r\n            id: 0\r\n        },\r\n        {\r\n            name: \"Илья\",\r\n            phone: '89500054321',\r\n            email: 'ilay@mail.ru',\r\n            id: 1\r\n        },\r\n        {\r\n            name: \"Дмитрий\",\r\n            phone: '89567854321',\r\n            email: 'dmitriy@mail.ru',\r\n            id: 2\r\n        },\r\n\r\n    ],\r\n    filterContactList: [],\r\n\r\n}\r\n\r\nconst ContactsReducer = (state=initialState, action) => {\r\n    switch (action.type){\r\n        case '/ContactsReducer/addContactToState':\r\n            let lastValue = state.contactsList[state.contactsList.length-1].id;\r\n            return {...state, contactsList: [...state.contactsList, {\r\n                    name: action.newContact.name,\r\n                    phone: action.newContact.phone,\r\n                    email: action.newContact.email,\r\n                    id: lastValue + 1\r\n                }]};\r\n        case '/ContactsReducer/deleteContactInState':\r\n            return {...state,\r\n                            contactsList: [...state.contactsList.filter(\r\n                                (item) => (item.id !== action.contactId))],\r\n                            filterContactList: [...state.filterContactList.filter(\r\n                                 (item) => (item.id !== action.contactId))],\r\n\r\n            };\r\n        case '/ContactsReducer/searchContactInState':\r\n            return { ...state,\r\n                filterContactList: [...state.contactsList.filter(item =>\r\n                   (item.name.toLowerCase().indexOf(action.textSearch.toLowerCase()) !== -1)\r\n\r\n                   )]};\r\n        case '/ContactsReducer/changeContactInfo':\r\n            return {...state,\r\n                contactsList: [...state.contactsList.map((contact) => (contact.id === action.contactId) ? (\r\n                    action.newContactForm ): contact)],\r\n                filterContactList: [...state.filterContactList.map((contact) => (contact.id === action.contactId) ? (\r\n                   action.newContactForm ): contact)]}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addContactToStateAC = (newContact) => ({type: addContactToState, newContact});\r\nexport const deleteContactInStateAC = (contactId) => ({type: deleteContactInState, contactId});\r\nexport const searchContactInStateAC = (textSearch) => ({type: searchContactInState, textSearch});\r\nexport const changeContactInfoAC = (newContactForm, contactId) => ({type: changeContactInfo, newContactForm, contactId});\r\n\r\nexport default ContactsReducer;\r\n","import React, { useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Contact from \"./Contact\";\r\nimport AddContact from \"./AddContact\";\r\nimport {\r\n    addContactToStateAC,\r\n    changeContactInfoAC,\r\n    deleteContactInStateAC,\r\n    searchContactInStateAC\r\n} from \"../Redux/ContactsReducer\";\r\nimport './../App.css';\r\n\r\nconst ContactsContainer = ({   contacts,\r\n                               addContactToStateAC,\r\n                               deleteContactInStateAC,\r\n                               searchContactInStateAC,\r\n                               changeContactInfoAC,\r\n                               filterContactList,\r\n                               }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [searchName, setSearchName] = useState('');\r\n\r\n    let currentContacts;\r\n    !searchName ? currentContacts = contacts : currentContacts = filterContactList;\r\n\r\n    const onSubmit = (contactForm) => {\r\n        addContactToStateAC(contactForm);\r\n        setEditMode(false);\r\n    }\r\n    const toggleEditMode = () => {\r\n       setEditMode(!editMode);\r\n    }\r\n    const setSearchNameInState = (value) => {\r\n        setSearchName(value.target.value);\r\n        searchContactInStateAC(value.target.value);\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div className={'header'}>\r\n            <header>\r\n                <h1>Записная книжка</h1>\r\n            </header>\r\n            <div>\r\n                <input name={'search'} type={'text'} placeholder={'Введите имя для поиска'}\r\n                       value={searchName} onChange={setSearchNameInState}/>\r\n                <button onClick={toggleEditMode}>+</button>\r\n\r\n            </div>\r\n        </div>\r\n            <div className={'mainContent'}>\r\n                 {!editMode ? <Contact contacts={currentContacts}\r\n                                       deleteContactInStateAC={deleteContactInStateAC}\r\n                                       changeContactInfoAC={changeContactInfoAC}\r\n                                       searchName={searchName}\r\n                                       searchContactInStateAC={searchContactInStateAC}\r\n                     />\r\n                            :  <AddContact onSubmit={onSubmit}/>\r\n                 }\r\n            </div>\r\n    </div>)\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        contacts: state.Contacts.contactsList,\r\n        filterContactList: state.Contacts.filterContactList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{addContactToStateAC,\r\n                                        deleteContactInStateAC,\r\n                                        searchContactInStateAC,\r\n                                        changeContactInfoAC,\r\n\r\n                                        })(ContactsContainer);","import React from 'react';\nimport './App.css';\nimport AuthContainer from \"./Auth/AuthContainer\";\nimport {connect} from \"react-redux\";\nimport ContactsContainer from \"./Contacts/ContactsContainer\";\n\nfunction App({isAuth}) {\n    return (\n        <div className=\"App\">\n            {!isAuth ? <AuthContainer/> : <ContactsContainer/>}\n        </div>\n    );\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.Auth.isAuth\n    }\n}\nexport default connect(mapStateToProps)(App);\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport ContactsReducer from \"./ContactsReducer\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst reducers = combineReducers({\r\n    Auth: AuthReducer,\r\n    Contacts: ContactsReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from './Redux/store';\nimport { BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n      <Provider store={store}>\n            <App />\n      </Provider>\n    </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}